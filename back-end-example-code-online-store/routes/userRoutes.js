const express = require('express')
const router = express.Router()
const User = require('../models/user');
const fs = require('fs');
const multer = require('multer')
const uploadPhoto = require('../config/upload_fotos')
const Comentario = require('../models/comentario');
const authMiddleware = require('../controllers/authMiddleware');
const { criarNovoUsuario, verificarSeEmailExiste, verificarCredenciais, tragaTodosOsDados, sendEmail, gerarToken, } = require('../controllers/userController');
const { verifyTokenValid } = require('../controllers/tokenController');

const meusegredo = process.env.MEUSEGREDO;

// Configura칞칚o do multer para o armazenamento tempor치rio da foto
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads'); // Pasta onde os arquivos ser칚o salvos temporariamente
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + '-' + file.originalname); // Nome do arquivo no formato data-nomeOriginal
  }
});

const upload = multer({ storage: storage });


router.post('/register', async (req, res) => {
  try {
    const { email, password, name } = req.body;
    // Verifique se todos os campos obrigat칩rios foram fornecidos
    if (!email || !password || !name) {
      return res.status(422).json({ msg: "Todos os campos obrigat칩rios devem ser fornecidos", status: 422, text: 'Unprocessable Entity' });
    }
    
    if (await verificarSeEmailExiste(email)) {
      console.log("User try register :", req.body['email'])
      return res.status(409).json({ msg: 'Usu치rio j치 existe', status: 409, text: 'Conflict' });
    }
    //registrando o usuario
    if (criarNovoUsuario(email, password, name)) {
      console.log("User Registrado :", req.body['email'])
      sendEmail(email,name)
      res.status(201).json({ msg: 'Usu치rio registrado com sucesso', status: 201, text: 'Create' });
    }
    else {
      res.status(500).json({ msg: 'Erro interno no servidor', status: 500, text: 'Internal Error' });
    }


  } catch (err) {
    console.log(err, ': ', req.body['email'])
    res.status(500).json({ msg: 'Erro ao registrar usu치rio', status: 500, text: 'Internal Error' });
  }
});
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    // Verifique se o usu치rio existe na base de dados


    const user = await verificarSeEmailExiste(email);

    if (!user) {
      return res.status(401).json({ msg: 'Credenciais inv치lidas' });
    }


    // Verifique se a senha do usu치rio foi fornecida
    if (!password) {
      return res.status(401).json({ msg: 'Credenciais inv치lidas' });
    }


    if (await verificarCredenciais(password, user.password)) {
      // gerando token JWT para o usu치rio autenticado
      gerarToken(user.id,meusegredo,'2h')
      const dados = {name:user.name , email:user.email, foto:user.photoUrl}
      // Retorne o token JWT para o cliente
      res.status(200).json({ token, dados});
    } else {
      return res.status(401).json({ msg: 'Credenciais inv치lidas' });
    }
  } catch (error) {
    res.status(500).json({ msg: 'Erro ao fazer login' });
  }
});

router.post('/upload_foto_profile', authMiddleware, upload.single('fotoPerfil'), async (req, res) => {

  // Rota para fazer o upload da foto de perfil do usu치rio
  try {

    if (!req.body.email) {
      return res.status(406).json({ msg: 'Campo email 칠 obrigat칩rio' });
    }

    // Verifique se o usu치rio existe no banco de dados
    const user = await User.findOne({ email: req.body.email });
    if (!user) {
      return res.status(404).json({ msg: 'Usu치rio n칚o encontrado' });
    }

    // Verifique se a foto de perfil foi fornecida na requisi칞칚o
    if (!req.file) {
      return res.status(400).json({ msg: 'Foto de perfil n칚o fornecida' });
    }

    const tempPath = req.file.path;

    // Enviar a foto para o Cloudinary
    const photoUrl = await uploadPhoto(tempPath);


    // Apagar a foto tempor치ria do servidor para liberar espa칞o
    fs.unlinkSync(tempPath);

    // Atualizar o campo "photoUrl" no usu치rio no banco de dados com a URL da foto no Cloudinary
    user.photoUrl = photoUrl;
    await user.save();

    res.json({ message: 'Upload da foto de perfil conclu칤do' });
  } catch (error) {
    console.error('Erro ao fazer o upload da foto:', error);
    res.status(500).json({ msg: 'Erro ao fazer o upload da foto' });
  }
});

router.post('/comentarios', authMiddleware, async (req, res) => {
  try {
    const { conteudo, avaliacao } = req.body;
    var avaliacaoDecimal = "";
    const usuario = req.user.userId; // O usu치rio autenticado est치 dispon칤vel em req.user
    // Verifique se o conte칰do est치 presente no corpo da requisi칞칚o
    if (!conteudo) {
      return res.status(400).json({ msg: 'Campo conteudo 칠 obrigat칩rio.' });
    }

    // Verifique se a avalia칞칚o est치 presente no corpo da requisi칞칚o
    if (!avaliacao) {
      return res.status(400).json({ msg: 'Campo avaliacao 칠 obrigat칩rio' });
    }
    if (typeof avaliacao == "string") {
      // Converta a v칤rgula em ponto na avalia칞칚o (caso exista)
      avaliacaoDecimal = parseFloat(avaliacao.replace(',', '.'));
      // Verifique se a avalia칞칚o 칠 um n칰mero v치lido entre 1 e 5
      if (isNaN(avaliacaoDecimal) || avaliacaoDecimal < 1 || avaliacaoDecimal > 5) {
        return res.status(400).json({ msg: 'Avalia칞칚o inv치lida. A avalia칞칚o deve estar entre 1 e 5.' });
      }
    }
    if (typeof avaliacao == "number") {
      if (avaliacao < 1 || avaliacao > 5) {
        return res.status(400).json({ msg: 'Avalia칞칚o inv치lida. A avalia칞칚o deve estar entre 1 e 5.' });
      }
    }

    // Crie o novo coment치rio
    const novoComentario = new Comentario({
      usuario,
      conteudo,
      avaliacao: avaliacaoDecimal == "" ? avaliacao : avaliacaoDecimal // Use a avalia칞칚o decimal aqui , verificando se existem valores no avaliacaoDecimal
    });

    // Salve o coment치rio no banco de dados
    const comentarioSalvo = await novoComentario.save();

    res.status(201).json(comentarioSalvo);
  } catch (error) {
    if (error.message.includes('Unexpected number in JSON')) {
      console.error(error)
      return res.status(400).json({ msg: 'JSON inv치lido. Verifique a sintaxe dos campos num칠ricos.' });
    } else {
      // Outros erros n칚o esperados
      console.error(error)
      return res.status(500).json({ msg: 'Erro interno do servidor.' });
    }
  }
});

router.post('/token', async (req, res) => {
  try {
    const { token } = req.body;
    if(verifyTokenValid(token,meusegredo)){
      return res.status(200).json({ msg: 'Ativa칞칚o da conta foi um sucesso! 游꿀' });
    }
    else{
      return res.status(400).json({ msg: 'Token inv치lido. Entre em contato com o suporte !' });
    }
  } catch (error) {
    return res.status(500).json({ msg: 'Erro interno do servidor.' });
  }
});

// Rota para obter todos os coment치rios
router.get('/comentarios', async (req, res) => {
  try {
    // Consulte o banco de dados para obter todos os coment치rios
    const comentarios = await Comentario.find();

    // Crie uma lista para armazenar os coment치rios com os nomes de usu치rio
    const comentariosComNomes = [];

    // Para cada coment치rio, encontre o nome do usu치rio associado
    for (const comentario of comentarios) {
      const usuario = await User.findById(comentario.usuario); // Supondo que o campo do usu치rio seja um ID
      if (usuario) {
        const comentarioComNome = {
          nome: usuario.name, // Adicione o nome do usu치rio ao resultado
          comentario: comentario.conteudo,
          avaliacao: comentario.avaliacao.toString(),
          foto: usuario.photoUrl
        };
        comentariosComNomes.push(comentarioComNome);
      }
    }

    res.status(200).json(comentariosComNomes);
  } catch (error) {
    console.error(error);
    return res.status(500).json({ msg: 'Erro interno do servidor.' });
  }
});


module.exports = app => app.use(router)